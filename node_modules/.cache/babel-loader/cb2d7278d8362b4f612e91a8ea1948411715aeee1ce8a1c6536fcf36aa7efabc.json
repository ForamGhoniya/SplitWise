{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CREATIVE\\\\Desktop\\\\workspace\\\\splitwise\\\\src\\\\feature\\\\homepage\\\\components\\\\amount.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SplitwiseApp = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n\n  // Function to add a new expense\n  const addExpense = expense => {\n    setExpenses([...expenses, expense]);\n  };\n\n  // Function to calculate the amount to receive for a user\n  const calculateAmountToReceive = user => {\n    let amountToReceive = 0;\n    expenses.forEach(expense => {\n      if (expense.paidBy === user) {\n        amountToReceive += expense.amount;\n      } else if (expense.splitWith.includes(user)) {\n        const splitCount = expense.splitWith.length;\n        const amountPerUser = expense.amount / splitCount;\n        amountToReceive -= amountPerUser;\n      }\n    });\n    return amountToReceive;\n  };\n\n  // Function to calculate the amount to pay for a user\n  const calculateAmountToPay = user => {\n    let amountToPay = 0;\n    expenses.forEach(expense => {\n      if (expense.paidBy === user) {\n        const splitCount = expense.splitWith.length;\n        const amountPerUser = expense.amount / splitCount;\n        amountToPay += amountPerUser;\n      } else if (expense.splitWith.includes(user)) {\n        amountToPay -= expense.amount;\n      }\n    });\n    return amountToPay;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Splitwise App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        const expense = {\n          paidBy: e.target.paidBy.value,\n          amount: parseFloat(e.target.amount.value),\n          splitWith: e.target.splitWith.value.split(\",\")\n        };\n        addExpense(expense);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Paid By:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"paidBy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Amount:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"amount\",\n          step: \"0.01\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Split With (comma-separated):\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"splitWith\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Amount to Receive/Pay\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"User 1: \", calculateAmountToReceive(\"User 1\"), \"/\", calculateAmountToPay(\"User 1\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"User 2: \", calculateAmountToReceive(\"User 2\"), \"/\", calculateAmountToPay(\"User 2\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"User 3: \", calculateAmountToReceive(\"User 3\"), \"/\", calculateAmountToPay(\"User 3\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Expenses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: expenses.map((expense, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Paid By:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), \" \", expense.paidBy, \",\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this), \" \", expense.amount, \",\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Split With:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), \" \", expense.splitWith.join(\", \")]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(SplitwiseApp, \"fvHkuU2kS79M/KpXWsEK8FpbhGg=\");\n_c = SplitwiseApp;\nexport default SplitwiseApp;\nvar _c;\n$RefreshReg$(_c, \"SplitwiseApp\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SplitwiseApp","_s","expenses","setExpenses","addExpense","expense","calculateAmountToReceive","user","amountToReceive","forEach","paidBy","amount","splitWith","includes","splitCount","length","amountPerUser","calculateAmountToPay","amountToPay","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","e","preventDefault","target","value","parseFloat","split","type","name","step","map","index","join","_c","$RefreshReg$"],"sources":["C:/Users/CREATIVE/Desktop/workspace/splitwise/src/feature/homepage/components/amount.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst SplitwiseApp = () => {\r\n    const [expenses, setExpenses] = useState([]);\r\n\r\n    // Function to add a new expense\r\n    const addExpense = (expense) => {\r\n        setExpenses([...expenses, expense]);\r\n    };\r\n\r\n    // Function to calculate the amount to receive for a user\r\n    const calculateAmountToReceive = (user) => {\r\n        let amountToReceive = 0;\r\n\r\n        expenses.forEach((expense) => {\r\n            if (expense.paidBy === user) {\r\n                amountToReceive += expense.amount;\r\n            } else if (expense.splitWith.includes(user)) {\r\n                const splitCount = expense.splitWith.length;\r\n                const amountPerUser = expense.amount / splitCount;\r\n                amountToReceive -= amountPerUser;\r\n            }\r\n        });\r\n\r\n        return amountToReceive;\r\n    };\r\n\r\n    // Function to calculate the amount to pay for a user\r\n    const calculateAmountToPay = (user) => {\r\n        let amountToPay = 0;\r\n\r\n        expenses.forEach((expense) => {\r\n            if (expense.paidBy === user) {\r\n                const splitCount = expense.splitWith.length;\r\n                const amountPerUser = expense.amount / splitCount;\r\n                amountToPay += amountPerUser;\r\n            } else if (expense.splitWith.includes(user)) {\r\n                amountToPay -= expense.amount;\r\n            }\r\n        });\r\n\r\n        return amountToPay;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Splitwise App</h2>\r\n            {/* Expense form to add new expenses */}\r\n            <form\r\n                onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    const expense = {\r\n                        paidBy: e.target.paidBy.value,\r\n                        amount: parseFloat(e.target.amount.value),\r\n                        splitWith: e.target.splitWith.value.split(\",\"),\r\n                    };\r\n                    addExpense(expense);\r\n                }}\r\n            >\r\n                <label>\r\n                    Paid By:\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"paidBy\"\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Amount:\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"amount\"\r\n                        step=\"0.01\"\r\n                    />\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    Split With (comma-separated):\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"splitWith\"\r\n                    />\r\n                </label>\r\n                <br />\r\n                <button type=\"submit\">Add Expense</button>\r\n            </form>\r\n\r\n            {/* Display the amount to receive and amount to pay for each user */}\r\n            <h3>Amount to Receive/Pay</h3>\r\n            <ul>\r\n                <li>\r\n                    User 1: {calculateAmountToReceive(\"User 1\")}/\r\n                    {calculateAmountToPay(\"User 1\")}\r\n                </li>\r\n                <li>\r\n                    User 2: {calculateAmountToReceive(\"User 2\")}/\r\n                    {calculateAmountToPay(\"User 2\")}\r\n                </li>\r\n                <li>\r\n                    User 3: {calculateAmountToReceive(\"User 3\")}/\r\n                    {calculateAmountToPay(\"User 3\")}\r\n                </li>\r\n                {/* Add more users as needed */}\r\n            </ul>\r\n\r\n            {/* Display the list of expenses */}\r\n            <h3>Expenses</h3>\r\n            <ul>\r\n                {expenses.map((expense, index) => (\r\n                    <li key={index}>\r\n                        <strong>Paid By:</strong> {expense.paidBy},{\" \"}\r\n                        <strong>Amount:</strong> {expense.amount},{\" \"}\r\n                        <strong>Split With:</strong>{\" \"}\r\n                        {expense.splitWith.join(\", \")}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SplitwiseApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}